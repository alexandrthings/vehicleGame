#if UNITY_EDITOR
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using ASTankGame.Damage;
using ASTankGame.Vehicles;
using ASTankGame.Vehicles.Ammo;
using UnityEditor.Rendering;
using UnityEngine;
using Debug = UnityEngine.Debug;

namespace DebugTests
{
    [ExecuteInEditMode]
    public class PenTest : MonoBehaviour
    {
        public LayerMask vehicleMask;

        [Header("Shell Parameters")]
        public float shellRadiusMM = 1000;
        public float shellAP = 1;
        public float shellDMG = 10000;
        public float checkDepth = 10;

        public DamageType dmgType;

        public PenetrationSolution result;

        public void Test()
        {
            RaycastHit hit;
            if (Physics.Raycast(transform.position, transform.forward, out hit, Mathf.Infinity, vehicleMask) && hit.transform.TryGetComponent(out Vehicle target))
            {
                Stopwatch timer = new Stopwatch();
                TestDamager dmg = new TestDamager(shellDMG, shellAP, dmgType, shellRadiusMM, hit.point,transform.forward * 100);

                timer.Start();
                result = DamageCalculator.CalculatePenetrationSolution(new DamageSource[] {dmg}, new Vehicle[] {target}, checkDepth);
                timer.Stop();
                Debug.Log($"Penetration solution solved in {timer.ElapsedMilliseconds} ms.");

                DamageReplayer.QueueReplay(result);

                foreach (DamageSequence seq in result.DamageSequences)
                {
                    Debug.LogWarning($"seq len {seq.length}");

                    foreach (TimestampedDamage tst in seq.DamageTimestamps)
                    {
                        Debug.Log($"pos {tst.projectilePos}");
                    }
                }
            }
            else
                Debug.LogWarning("No vehicle hit");

            //result.ApplyDamage();
        }

        public void OnDrawGizmos()
        {
            RaycastHit hit;
            if (Physics.Raycast(transform.position, transform.forward, out hit, Mathf.Infinity, vehicleMask) && hit.transform.TryGetComponent(out Vehicle target))
                foreach (DamageCalculator.AffectedBlock block in DamageCalculator.GetShellSlice(target.transform.InverseTransformDirection(transform.forward), shellRadiusMM / 1000 / target.Scale))
                {
                    Gizmos.color = new Color(block.weight, 0, 0);
                    Gizmos.DrawCube(target.transform.TransformPoint((target.GetLocalPos(hit.point) + new Vector3(block.x, block.y, block.z)) * target.Scale), Vector3.one * target.Scale);
                }

            Gizmos.color = Color.yellow;
            Gizmos.DrawLine(transform.position, transform.position + transform.forward * 1000);

            if (result != null)
            {
                foreach (DamageSequence seq in result.DamageSequences)
                {
                    foreach (TimestampedDamage tst in seq.DamageTimestamps)
                    {
                        Gizmos.color = Color.yellow;
                        Gizmos.DrawSphere(result.Targets[tst.target].transform.TransformPoint(tst.projectilePos * result.Targets[tst.target].Scale), result.Targets[tst.target].Scale * 0.1f);

                        foreach (DmgAndPos dmg in tst.DamageDealt)
                        {
                            Gizmos.color = new Color(dmg.dmg, 0, 0);
                            Gizmos.DrawWireSphere(result.Targets[tst.target].transform.TransformPoint((Vector3)dmg.pos * result.Targets[tst.target].Scale), result.Targets[tst.target].Scale * 0.1f);

                            
                        }
                    }
                }
            }
        }

        struct TestDamager : DamageSource
        {
            public float Damage { get; set; }
            public float APValue { get; set; }
            public DamageType DmgType { get; set; }
            public float Radius { get; set; }

            public Vector3 position { get; set; }
            public Vector3 velocity { get; set; }

            public TestDamager(float dmg, float apv, DamageType dtype, float rad, Vector3 pos, Vector3 vel)
            {
                Damage = dmg;
                APValue = apv;
                DmgType = dtype;
                Radius = rad;
                position = pos;
                velocity = vel;
            }
        }
    }
}
#endif